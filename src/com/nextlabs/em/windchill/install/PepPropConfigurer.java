package com.nextlabs.em.windchill.install;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.Scanner;
import java.util.regex.Pattern;
public class PepPropConfigurer {
	private String propPath=null;
	private Properties props=null;
	private boolean bWriteNeeded=false;
	
	private static final Pattern PATTERN = Pattern.compile(
	        "^(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}([01]?\\d\\d?|2[0-4]\\d|25[0-5])$");
	
	public PepPropConfigurer(){}
	public PepPropConfigurer(String path)
	{
		propPath=path;
	}
	
	public void install()
	{
		if(props==null||propPath==null)
			load();
		
		ConfigureHelper confHelper=new ConfigureHelper();
		String confPath=confHelper.getDocBase()+"\\com\\nextlabs\\conf\\";
		String nlPath=confHelper.getDocBase()+"\\com\\nextlabs\\";
		
		props.setProperty(com.nextlabs.Property.PC_KEY_STORE, 				confPath+"rmskmc-keystore.jks");
		props.setProperty(com.nextlabs.Property.SEC_SECURITYLABEL,          "THIRD_PARTY_PROPRIETARY");
		props.setProperty(com.nextlabs.Property.PEP_USER_ID,                "eMail");
		props.setProperty(com.nextlabs.Property.PC_KEY_STORE_PASSWORD, 		"123next!");
		props.setProperty(com.nextlabs.Property.PC_TRUST_STORE,				confPath+"rmskmc-truststore.jks" );
		props.setProperty(com.nextlabs.Property.PC_TRUST_STORE_PASSWORD,	"123next!");
		props.setProperty(com.nextlabs.Property.PC_RMI_PORT, 				"1299");
		props.setProperty(com.nextlabs.Property.PC_CONNECT_TIMEOUT, 		"5000");
		Scanner scanner = new Scanner(System.in);
		System.out.println("\n\n Enter Policy Controller IP Address: ");
		String ipaddress_pc = scanner.next();
		int i=0;
		if(!PATTERN.matcher(ipaddress_pc).matches()){
			while(i<2 && !PATTERN.matcher(ipaddress_pc).matches()){
				System.out.println("\n\n Wrong IP address, correct ip should have 127.0.0.1 format\n\n");
				ipaddress_pc = scanner.next();
				i++;
			}
		}
		if(!PATTERN.matcher(ipaddress_pc).matches()){
			System.out.println(ConfigurerUtils.formatString("\n\n\n You have exceeded number of tries. default ip address will be set in  ="+propPath," file"));
			ipaddress_pc="127.0.0.1";
		}
		props.setProperty(com.nextlabs.Property.PC_IP_ADDRESS, 				ipaddress_pc);
		props.setProperty(com.nextlabs.Property.PC_CONNECTION_POOL_SIZE,	"8");
		props.setProperty(com.nextlabs.Property.PEP_DEFAULT_ACTION, 		"allow");
		props.setProperty(com.nextlabs.Property.PEP_DEFAULT_DONTCARE_DECISION,"allow");
		props.setProperty(com.nextlabs.Property.PEP_DEFAULT_INDETERMINATE_DECISION,"allow");
		props.setProperty(com.nextlabs.Property.PEP_DEFAULT_USER_ATTRIBUTES_TO_SEND,"all");
		props.setProperty(com.nextlabs.Property.PEP_DEFAULT_RESOURCE_ATTRIBTES_TO_SEND,"all");
		props.setProperty(com.nextlabs.Property.PEP_DENY_MESSAGE_DEFAULT, 	"you are not allowed to access the item. @POLICY_NAME_PLACEHOLDER@ haha");
		props.setProperty(com.nextlabs.Property.PEP_DENY_MESSAGE_FILE, 		nlPath+"denypage.html");
		props.setProperty(com.nextlabs.Property.PEP_DENY_MESSAGE_INFO, 		nlPath+"denymessage.txt");
		props.setProperty(com.nextlabs.Property.PEP_DENY_STATUS_FILE, 		nlPath+"setstate.html");
		props.setProperty(com.nextlabs.Property.PEP_LOGLEVEL, 				"WARN");
		props.setProperty(com.nextlabs.Property.PEP_WINDCHILL_OBLIGATION_XML, confPath+"obligations.xml");
		props.setProperty("pep.windchill.obligation.edrm.remove.temp", 		"Yes");
		props.setProperty(com.nextlabs.Property.PEP_WINDCHILL_SOFT_ATTRIBUTES, "Classification");
		props.setProperty(com.nextlabs.Property.NEXTLABS_CLOOUDAZ_PROPERTIES_FILE_PATH,confHelper.getDocBase()+"\\com\\nextlabs\\conf\\openaz-pep-on-prem.properties");
		bWriteNeeded=true;
	}
	public void load()
	{
		if(propPath==null)
		{
			ConfigureHelper confHelper=new ConfigureHelper();
			propPath=confHelper.getDocBase()+"\\com\\nextlabs\\conf\\"+com.nextlabs.Property.PEP_PROPERTIES_FILE_NAME;
		}
		
		
		//System.out.println(ConfigurerUtils.formatString("pep file="+propPath,"file opend"));
		props=new Properties();
		if(new File(propPath).exists()==true)
		{
			InputStream is=null;
			try
			{
				is = new FileInputStream(propPath);
			}
			catch(FileNotFoundException exp)
			{
			
			}
			if(is==null)
				return;
			
	        Properties props = new Properties(); 
	        try
	        {
	        	props.load(is); 
	        }
	        catch(IOException ioExp)
	        {
	        	ioExp.printStackTrace();
	        }
		}
	}
	
	public boolean unload()
	{
		if(bWriteNeeded==true)
		{
			try
			{
				FileOutputStream fos=null;
				fos = new FileOutputStream(propPath);
	        	props.store(fos, "Generated by NextLabs Installation tool");
	        	fos.flush();
	            fos.close();
			}
			catch(IOException ioExp)
			{
				ioExp.printStackTrace();
			}
		}
		return bWriteNeeded;
	}
}
